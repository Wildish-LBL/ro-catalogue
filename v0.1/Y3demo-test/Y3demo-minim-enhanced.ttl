@prefix ao: <http://purl.org/ao/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix minim: <http://purl.org/minim/minim#> .
@prefix ore: <http://www.openarchives.org/ore/terms/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfg: <http://www.w3.org/2004/03/trix/rdfg-1/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix ro: <http://purl.org/wf4ever/ro#> .
@prefix roterms: <http://purl.org/wf4ever/roterms#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<#ChecklistConstraints> minim:hasChecklist [ a minim:Checklist ;
            minim:forPurpose "complete" ;
            minim:forTargetTemplate "{+targetro}" ;
            minim:toModel <#model_complete> ] .

<#req_exactly> a minim:QueryTestRule ;
    minim:max 3 ;
    minim:min 3 ;
    minim:query [ minim:sparql_query "?file rdf:type ex:Part" ] ;
    minim:showfail "Fewer or greater than 3 file as part values are present" ;
    minim:showpass "Exactly 3 file as part values are present" .

<#req_exists> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query "?file rdf:type ex:Part" ] ;
    minim:showfail "File as part does not exist" ;
    minim:showpass "File exists as a part" .

<#req_foreach_accessible> a minim:QueryTestRule ;
    minim:isLiveTemplate "{+pruri}" ;
    minim:query [ minim:result_mod "ORDER BY ?file" ;
            minim:sparql_query "?file rdf:type ex:Part" ] ;
    minim:showfail "File as part %(file)s is not accessible" ;
    minim:showmiss "No file as part definitions are present" ;
    minim:showpass "All file as part resources are accessible (live)" .

<#req_foreach_aggregated> a minim:QueryTestRule ;
    minim:aggregatesTemplate "{+file}" ;
    minim:query [ minim:result_mod "ORDER BY ?file" ;
            minim:sparql_query "?file rdf:type ex:Part" ] ;
    minim:showfail "File as part %(file)s is not aggregated in RO" ;
    minim:showmiss "No file as part definitions are present" ;
    minim:showpass "All file as part resources are aggregated in RO" .

<#req_foreach_exists> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query "?file ex:partOf [ rdf:type ex:Whole ]" ] ;
    minim:query [ minim:result_mod "ORDER BY ?file" ;
            minim:sparql_query "?file rdf:type ex:Part" ] ;
    minim:showfail "File as part %(file)s is not part of some whole" ;
    minim:showpass "Files as part are partOf some indicated whole" .

<#req_max> a minim:QueryTestRule ;
    minim:max 3 ;
    minim:query [ minim:sparql_query "?file rdf:type ex:Part" ] ;
    minim:showfail "At more than 3 file as part values are present" ;
    minim:showpass "At most 3 file as part values are present" .

<#req_min> a minim:QueryTestRule ;
    minim:min 3 ;
    minim:query [ minim:sparql_query "?file rdf:type ex:Part" ] ;
    minim:showfail "Fewer than 3 file as part values are present" ;
    minim:showpass "At least 3 file as part values are present" .

<#req_python> a minim:SoftwareEnvironmentRule ;
    minim:command "python --version" ;
    minim:response "^Python 2\\.7.*$" ;
    minim:showfail "Python 2.7.x not present" ;
    minim:showpass "Python 2.7.x present" .

<#model_complete> a minim:Model ;
    minim:hasMayRequirement [ a minim:Requirement ;
            minim:isDerivedBy <#req_workflow_definitions_missing> ;
            minim:seq "req_04a" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_web_service_enumeration> ;
            minim:seq "req_07a" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_workflow_definitions_inaccessible> ;
            minim:seq "req_05a" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_sample_data_enumeration> ;
            minim:seq "req_08a" ] ;
    minim:hasMustRequirement [ a minim:Requirement ;
            minim:isDerivedBy <#req_workflow_definition> ;
            minim:seq "req_05" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_results_run> ;
            minim:seq "req_10" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_live_web_service> ;
            minim:seq "req_07" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_selected_inputs> ;
            minim:seq "req_09" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_workflow_description> ;
            minim:seq "req_04" ] ;
    minim:hasShouldRequirement [ a minim:Requirement ;
            minim:isDerivedBy <#req_dependencies> ;
            minim:seq "req_06" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_research_question> ;
            minim:seq "req_01" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_conclusion> ;
            minim:seq "req_11" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_sample_data> ;
            minim:seq "req_08" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_design_sketch> ;
            minim:seq "req_03" ],
        [ a minim:Requirement ;
            minim:isDerivedBy <#req_article> ;
            minim:seq "req_02" ] .

<#req_article> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query "?res rdf:type roterms:Paper" ] ;
    minim:showfail "Experiment description is not indicated" ;
    minim:showpass "Experiment description paper is indicated" .

<#req_conclusion> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query "?res rdf:type roterms:Conclusions" ] ;
    minim:showfail "Experiment conclusions are not indicated.  Conclusions are indicated by including a suitably annotated resource in the Research Object/Pack." ;
    minim:showpass "Experiment conclusions are indicated" .

<#req_dependencies> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query """{ ?wp rdf:type wfdesc:Process
   ; roterms:requiresSoftware ?anything . }
UNION
  {?wp rdf:type wfdesc:Workflow
    ; roterms:requiresSoftware ?anything . }""" ] ;
    minim:showfail "No workflow process software dependencies are indicated." ;
    minim:showpass "Workflow process software dependencies are indicated" .

<#req_design_sketch> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query "?res rdf:type roterms:Sketch" ] ;
    minim:showfail "Experiment design sketch is not indicated" ;
    minim:showpass "Experiment design sketch is indicated" .

<#req_live_web_service> a minim:QueryTestRule ;
    minim:isLiveTemplate "{+wfservice}" ;
    minim:query [ minim:result_mod "ORDER BY ?wflab" ;
            minim:sparql_query """?wf rdf:type wfdesc:Process ;
    rdfs:label ?wflab .
  { ?wf wf4ever:serviceURI ?wfservice }
  UNION
  { ?wf wf4ever:wsdlURI ?wfservice }""" ] ;
    minim:showfail "Workflow service %(wfservice)s for %(wflab)s is not accessible" ;
    minim:showmiss "No workflow service references found. These are provided as part of a workflow description (done by myExperiment) or using the \"Annotate and Transform\" option that creates a workflow description with references to any workflow services used." ;
    minim:showpass "All referenced workflow services are accessible" .

<#req_research_question> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query """{ ?rqh rdf:type roterms:Hypothesis }
UNION
{ ?rqh rdf:type roterms:ResearchQuestion }""" ] ;
    minim:showfail "Experiment hypothesis or research question is not indicated." ;
    minim:showpass "Experiment hypothesis or research question is indicated" .

<#req_results_run> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query """?wf rdf:type wfdesc:Workflow
  ; rdfs:label ?wflab .
?wfrun rdf:type wfprov:WorkflowRun ;
    rdf:type roterms:ResultGenerationRun ;
    wfprov:describedByWorkflow ?wf""" ] ;
    minim:showfail "No result data indicated for any workflow" ;
    minim:showpass "Workflow results data run indicated" .

<#req_sample_data> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query """?wf rdf:type wfdesc:Workflow
  ; rdfs:label ?wflab .
?wfrun rdf:type wfprov:WorkflowRun ;
    rdf:type roterms:ExampleRun ;
    wfprov:describedByWorkflow ?wf""" ] ;
    minim:showfail "No workflow sample run indicated for any workflow" ;
    minim:showpass "Workflow sample run indicated" .

<#req_sample_data_enumeration> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query """?wfrun rdf:type wfprov:WorkflowRun ;
    rdf:type roterms:ExampleRun ;
    wfprov:describedByWorkflow ?wf""" ] ;
    minim:listfail [ a minim:ValueCollector ;
            minim:collectList "wflab_list" ;
            minim:collectVar "wflab" ] ;
    minim:query [ minim:result_mod "ORDER BY ?wflab" ;
            minim:sparql_query """?wf rdf:type wfdesc:Workflow
  ; rdfs:label ?wflab""" ] ;
    minim:showfail "The following workflows did not indicate a sample run: %(wflab_list)s." ;
    minim:showpass "All workflows have indicated sample run" .

<#req_selected_inputs> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query """?wf rdf:type wfdesc:Workflow
  ; rdfs:label ?wflab .
?wfrun rdf:type wfprov:WorkflowRun
  ; rdf:type roterms:ProspectiveRun
  ; wfprov:describedByWorkflow ?wf""" ] ;
    minim:showfail "No input data indicated for any workflow" ;
    minim:showpass "Workflow input data indicated" .

<#req_web_service_enumeration> a minim:QueryTestRule ;
    minim:isLiveTemplate "{+wfservice}" ;
    minim:listfail [ a minim:ValueCollector ;
            minim:collectList "wflab_list" ;
            minim:collectVar "wflab" ],
        [ a minim:ValueCollector ;
            minim:collectList "wfservices_fail" ;
            minim:collectVar "wfservice" ] ;
    minim:listpass [ a minim:ValueCollector ;
            minim:collectList "wfservices_pass" ;
            minim:collectVar "wfservice" ] ;
    minim:query [ minim:result_mod "ORDER BY ?wflab" ;
            minim:sparql_query """?wf rdf:type wfdesc:Process ;
    rdfs:label ?wflab .
  { ?wf wf4ever:serviceURI ?wfservice }
  UNION
  { ?wf wf4ever:wsdlURI ?wfservice }""" ] ;
    minim:showfail "Some workflow services used by workflows %(wflab_list)s are not accessible: %(wfservices_fail)s.  Accessible services referenced are %(wfservices_pass)s." ;
    minim:showpass "All referenced workflow services are accessible: %(wfservices_pass)s" .

<#req_workflow_definition> a minim:QueryTestRule ;
    minim:isLiveTemplate "{+wfdef}" ;
    minim:query [ minim:result_mod "ORDER BY ?wflab" ;
            minim:sparql_query """?wf rdf:type wfdesc:Workflow
  ; rdfs:label ?wflab
  ; wfdesc:hasWorkflowDefinition ?wfdef""" ] ;
    minim:showfail "Workflow definition %(wfdef)s for %(wflab)s is not accessible" ;
    minim:showmiss "No workflow definitions found.  A workflow definition is referenced by a workflow description annotation using the \"wfdesc\" vocabulary.  If a .t2flow file is present in a myExperiment pack, use the \"Annotate and Transform\" option to create the anotation." ;
    minim:showpass "All referenced workflow definitions are accessible" .

<#req_workflow_definitions_inaccessible> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query "?wf wfdesc:hasWorkflowDefinition ?wfdef" ] ;
    minim:listfail [ a minim:ValueCollector ;
            minim:collectList "wflab_list" ;
            minim:collectVar "wflab" ] ;
    minim:query [ minim:result_mod "ORDER BY ?wflab" ;
            minim:sparql_query """?wf rdf:type wfdesc:Workflow
  ; rdfs:label ?wflab
  ; wfdesc:hasWorkflowDefinition ?wfdef""" ] ;
    minim:showfail "The following workflows do not have accessible workflow definitions: %(wflab_list)s" ;
    minim:showmiss "No workflows definitions referenced" ;
    minim:showpass "All referenced workflows have accessible workflow definitions" .

<#req_workflow_definitions_missing> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query "?wf wfdesc:hasWorkflowDefinition ?wfdef" ] ;
    minim:listfail [ a minim:ValueCollector ;
            minim:collectList "wflab_list" ;
            minim:collectVar "wflab" ] ;
    minim:query [ minim:result_mod "ORDER BY ?wflab" ;
            minim:sparql_query """?wf rdf:type wfdesc:Workflow
  ; rdfs:label ?wflab""" ] ;
    minim:showfail "No workflow definition indicated for the following workflows: %(wflab_list)s" ;
    minim:showmiss "No labeled workflows found" ;
    minim:showpass "All referenced workflows have indicated workflow definitions" .

<#req_workflow_description> a minim:QueryTestRule ;
    minim:exists [ minim:sparql_query """?wf rdf:type wfdesc:Workflow
  ; rdfs:label ?label""" ] ;
    minim:showfail "Workflow description is not present.  For workflows to be recognized, they must be annotated with descriptions using the \"wfdesc\" vocabulary.  This is normally done in when Taverna workflows are transformed to myExperiment packs." ;
    minim:showpass "Workflow description is present" .

